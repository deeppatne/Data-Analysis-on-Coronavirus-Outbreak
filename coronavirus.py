# -*- coding: utf-8 -*-
"""Coronavirus.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tZmtL6umGwD9QAtVdndbB8g6DP8jEJBU
"""

# Importing Pandas and Numpy
import pandas as pd
import numpy as np

# Commented out IPython magic to ensure Python compatibility.
# Importing Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

#Installing Geopandas
pip install geopandas

### Importing Geopandas
import geopandas as gpd
from shapely.geometry import Point, Polygon
import descartes

# Loading dataset
from google.colab import files
uploaded = files.upload()

df = pd.read_csv("coronavirus_data.csv")

#Displaying the first 5 rows
df.head()

# Getting the column names
df.columns

# Removing unwanted symbols from column names
df.columns.str.replace(r'\n','', regex=True)

# Updating our columns
df.columns = df.columns.str.replace(r'\n','', regex=True)

# Displaying our updated columns
df.columns

# Renaming the required columns
df.rename(columns={'Province/State':'Province_State','Country/Region':'Country_Region'},inplace=True)

# Displaying our columns
df.columns

# Checking the number of rows and columns in our dataset
df.shape

# Displaying the data type of our columns
df.dtypes

# Displaying first 10 rows of our newly updated dataset
df.head(10)

# Checking the number of missing values
df.isna().sum()

# Getting statistics of our data
df.describe()

df.head()

df.columns

# Groping our data on basis of date
df.groupby('Date')['Confirmed','Deaths', 'Recovered'].sum()

df_per_day = df.groupby('Date')['Confirmed','Deaths', 'Recovered'].max()

# Calculating max
df_per_day.head()

df_per_day.describe()

# Getting max no of cases per day
df_per_day['Confirmed'].max()

# Getting minimum number of cases per day
df_per_day['Confirmed'].min()

# Date on which maximum number was discovered
df_per_day['Confirmed'].idxmax()

# Date on which minimum number was discovered
df_per_day['Confirmed'].idxmin()

# Getting number of cases per country 
df.groupby(['Country_Region'])['Confirmed','Deaths', 'Recovered'].max()

# Value count of each country
df['Country_Region'].value_counts()

#Plotting a bar graph based on number of cases per country
df['Country_Region'].value_counts().plot(kind='bar',figsize=(20,10))

# Name of the countries Coronavirus has affected till now
df['Country_Region'].unique()

# Number of countries Coronavirus has affected till now
len(df['Country_Region'].unique())

# Pie Chart of 53 affected countries and percentage of cases per country
plt.figure(figsize=(20,10))
df['Country_Region'].value_counts().plot.pie(autopct="%1.1f%%")

#Using Geopandas
dir(gpd)

df.head()

# Converting our data to GeoDataframe
gdf01 = gpd.GeoDataFrame(df,geometry=gpd.points_from_xy(df['Long'],df['Lat']))

# Displaying our newly converted data
gdf01.head()

# Checking type of our data
type(gdf01)

# Method 2
points = [ Point(x,y) for x,y in zip(df.Long,df.Lat)]

gdf03 = gpd.GeoDataFrame(df,geometry=points)

gdf03

# Plotting our data
gdf01.plot(figsize=(20,10))

# Displaying the world map
world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))
ax = world.plot(figsize=(20,10))
ax.axis('off')

# Merging our data and the world map
fig,ax = plt.subplots(figsize=(20,10))
gdf01.plot(cmap='Purples',ax=ax)
world.geometry.boundary.plot(color=None,edgecolor='k',linewidth=2,ax=ax)

# Changing colour of our map and data points
fig,ax = plt.subplots(figsize=(20,10))
world.geometry.plot(color='Orange',edgecolor='k',linewidth=2,ax=ax)
gdf01.plot(cmap='Blues',ax=ax)

# Per  country
world

# Getting number of continents
world['continent'].unique()

# Selecting data only for Asia
asia = world[world['continent'] == 'Asia']

asia

# In a same manner, storing data  for a specific continent in a specific variable
africa = world[world['continent'] == 'Africa']
north_america = world[world['continent'] == 'North America']
europe = world[world['continent'] == 'Europe']

df.head()

# Getting number of cases in Mainland China
df[df['Country_Region'] == 'Mainland China']

# Getting number of cases in China using Geopandas
gdf01[gdf01['Country_Region'] == 'Mainland China']

# Only displaying the cases only in China
fig,ax = plt.subplots(figsize=(20,10))
gdf01[gdf01['Country_Region'] == 'Mainland China'].plot(cmap='Purples',ax=ax)
world.geometry.boundary.plot(color=None,edgecolor='k',linewidth=2,ax=ax)

# Displaying the cases in China using map of Asia
fig,ax = plt.subplots(figsize=(20,10))
gdf01[gdf01['Country_Region'] == 'Mainland China'].plot(cmap='Purples',ax=ax)
asia.geometry.boundary.plot(color=None,edgecolor='k',linewidth=2,ax=ax)

# Displaying the cases in India using map of Asia
fig,ax = plt.subplots(figsize=(20,10))
asia.geometry.plot(color='Yellow',edgecolor='k',linewidth=2,ax=ax)
gdf01[gdf01['Country_Region'] == 'India'].plot(cmap='Purples',ax=ax)

# Displaying the cases in Egypt using map of Africa
fig,ax = plt.subplots(figsize=(20,10))
africa.geometry.plot(color='Green',edgecolor='k',linewidth=2,ax=ax)
gdf01[gdf01['Country_Region'] == 'Egypt'].plot(cmap='Purples',ax=ax)

# Displaying the cases in United States using map of North America
fig,ax = plt.subplots(figsize=(20,10))
north_america.geometry.plot(color='Grey',edgecolor='k',linewidth=2,ax=ax)
gdf01[gdf01['Country_Region'] == 'US'].plot(cmap='Oranges',ax=ax)

# Displaying the cases in United Kingdom using map of Europe
fig,ax = plt.subplots(figsize=(20,10))
europe.geometry.plot(color='Yellow',edgecolor='k',linewidth=2,ax=ax)
gdf01[gdf01['Country_Region'] == 'UK'].plot(cmap='Reds',ax=ax)

df.to_csv("coronavirus_cleaned_data.csv")